version: '3.8'

services:
  postgres:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    container_name: postgres
    restart: always
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust  # Simplifies auth for development
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-hway}
      PGDATA: /var/lib/postgresql/data/pgdata
    command: >
      postgres 
      -c shared_preload_libraries='pg_net'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf:ro
      - ./pg_hba.conf:/docker-entrypoint-initdb.d/pg_hba.conf:ro
      - ./setup-postgres.sh:/docker-entrypoint-initdb.d/setup-postgres.sh:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  hway:
    image: ghcr.io/sonr-io/hway:latest
    container_name: hway
    restart: unless-stopped
    environment:
      PORT: ${PORT:-1323}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-hway}?sslmode=disable
      MIGRATE: "true"
      LOG_LEVEL: debug
    ports:
      - "${PORT:-1323}:${PORT:-1323}"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
